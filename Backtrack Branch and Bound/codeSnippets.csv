dwarf,benchnmark,code_section
backtrack_branch_bound,nqueen.cpp,"static long long nqueen_solver(int size, unsigned int board_mask, unsigned int mask, unsigned int left_mask, unsigned int right_mask, long long* unique_solutions){unsigned int masks[32];unsigned int left_masks[32];unsigned int right_masks[32];unsigned int ms[32];unsigned int ns;unsigned int ns_array[32];unsigned int t_array[32];int board_array[32];long long solutions = 0;long long total_solutions = 0;int i = 0;unsigned int border_mask = 0;int index;unsigned int forbidden[32];masks[0] = mask;left_masks[0] = left_mask;right_masks[0] = right_mask;ms[0] = mask | left_mask | right_mask;ns_array[0] = mask;index = bit_scan(mask);for(int j = 0; j < index; j++){border_mask |= (1 << j);border_mask |= (1 << (size - j - 1));}for(int i = 0; i < size; i++){if(i == size - 2){forbidden[i] = border_mask;}else if((i + 1) < index || (i + 1) > size - index - 1){forbidden[i] = 1 | (1 << (size - 1));}else{forbidden[i] = 0;}}while(i >= 0){unsigned int m = ms[i] | forbidden[i];ns = (m + 1) & ~m;if((ns & board_mask) != 0){ns_array[i+1] = ns;if(i == size - 2){int repeat_times = 8;bool rotate1 = false;bool rotate2 = false;bool rotate3 = false;if(ns_array[index] == (1 << (size - 1))) rotate1 = true;if(ns_array[size - index - 1] == 1) rotate2 = true;if(ns_array[size - 1] == (1 << (size - index - 1))) rotate3 = true;if(rotate1 || rotate2 || rotate3){transform(ns_array, board_array, size);int repeat_times = 8;bool equal = true;int min_pos = size;int relation = 0;int j;if(rotate1){equal = true;relation = 0;for(j = 0; j < size; j++){if(board_array[size - board_array[j] - 1] != j){equal = false;if(min_pos > size - board_array[j] - 1){relation = board_array[size - board_array[j] - 1] - j;min_pos = size - board_array[j] - 1;}}}repeat_times = equal ? 2 : repeat_times;}if(relation >= 0 && rotate2){equal = true;min_pos = size;relation = 0;for(j = 0; j < size; j++){if(board_array[board_array[j]] != size - j - 1){equal = false;if(min_pos > board_array[j]){relation = board_array[board_array[j]] - (size - j - 1);min_pos = board_array[j];}}}repeat_times = equal ? 2 : repeat_times;}if(relation >= 0 && repeat_times == 8 && rotate3){equal = true;min_pos = size;relation = 0;for(j = size - 1; j >= size / 2; j--){if(board_array[size - j - 1] != size - board_array[j] - 1){equal = false;relation = board_array[size - j - 1] - (size - board_array[j] - 1);break;}}repeat_times = equal ? 4 : repeat_times;}total_solutions += (relation >= 0) ? repeat_times : 0;solutions += (relation >= 0) ? 1 : 0;}else{total_solutions += 8;solutions++;}i--;}else{ms[i] |= ns;masks[i+1] = masks[i] | ns;left_masks[i+1] = (left_masks[i] | ns) << 1;right_masks[i+1] = (right_masks[i] | ns) >> 1;ms[i+1] = masks[i+1] | left_masks[i+1] | right_masks[i + 1];i++;}}else{i--;}}}"

